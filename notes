
Design:
	First design (example CAMBADA robots):
		- Coordination layer;
			* Process Manager;
			* Monitor;
			* RTDB;
		- Low-level control layer
			* Motion;
			* System Monitor
			* Odometry

	The real software design (CAMBADA):
		- Execution Flow -> (Low-level);
		- Morphological Processing Sub-System; 
		- Utility Sub-Sytem;
		- Color Processing Sub-System;

	Software Implementation

	Design fills the gap between knowing whats needed (software requirements phase) and building the code that makes it work (construction phase)
	There is a process for design but not an algorythm
	Software design is a heuristic rather than a deterministic process
	Software design is needed at several different levels of detail in a system:
		- High-Level: System & Sub-Systems 
		- Medium-Level: Classes
		- Low-level: Algorithms and Data Structures
	Poorly designed programs are difficult to understand and modify 
	Complexity in software:
		- Essential complexities - complexities inherent in the problem
		- Accidental complexities 
	Goal: manage essential complexity while avoiding the introduction of additional accidental complexities
	Software Complexity:
		- Modularity (subdivide the solution into smaller easier to manage components. (divide and conquer));
		- Abstraction (use abstraction to supress details in places where they are necessary);
		- Information Hiding (hide details and complexity behind simple interfaces);
		- Inheritance (general components may be reused to define more specific elements);
		- Composition (resuse of other components to build a new solution)
	Design is difficult because design is an abstraction of the solution which has yet to be created
	Non-deterministic
	Heuristic
	Emergent

	Process:
		- software requirements;
		- system specification;
		- architecture and patterns;
		- build prototypes;
		- document;
		- refactor
		============================
		- user requirements and system specification;
		- domain knowledge;
 		- implementation knowledge
	

   
Design Patterns:
	Creational:
		- Factory Method: Provides an interface for creating objects in a superclass, 
				  but allows subclasses to alter the type of objects that will be created;
		- Abstract Factory: Lets you produce families of related objects without specifying their concrete classes;
		- Builder: Lets you construct complex objects step by step.
		           The pattern allows you to provide different types and representations of an object using the same constuction code;
		- Prototype: Lets you copy existing objects without making your code dependent on their classes;
		- Singleton: Lets you ensure that a class has only one instance, while providing a global access point to this instance.
	Structural:
		- Adapter: Allows objects with incompatible interfaces to collaborate;
		- Bridge: Lets you split a large class or a set of closely related classes into two separate hierarchies-abstraction
			  and implementation-which can be developed independently of each other
		- Composite: Lets you compose objects intro tree structures and then work with these structures as if they were individual objects;
		- Decorator: Lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors;
		- Facade: Provides a simplified interface to a library, a framework, or any other complex set of classes;
		- Flyweight: Lets you fit more objects into the available amount of RAM by sharing common parts between multiple objects instead of 
			     keeping all of the data in each object;
		- Proxy: Lets you provide a substitute or placeholder for another object. A proxy controls access to the original object,
			 allowing you to perfom something either before or after the request gets through to the original object.
	Behavioral:
		- Chain of Responsability: Lets you pass requests along a chain of handlers. Upon receiving a request, each handler devides either
					  to process the request or to pass it to the next handler in the chain;
		- Command: Turns a request into a stand-alone object that contains all information about the request.
			   This transformation lets you pass requests as a method arguments, delay or queue a request's execution, and support
			   undoable operations;
		- Iterator: Lets you traverse elements of a collection without exposing its underlying representation;
		- Mediator
		- Memento
		- Observer
		- State
		- Strategy 
		- Template Method 
		- Visitor
	[link] -> https://refactoring.guru/design-patterns/catalog

Behavioral Patterns for quiz:
- Chain of Responsability: Lets you pass request alon a chain of handlers,
upon receiving a request, each handler decider either to process the request
or to pass it to the next handler in chain.
Structure: Handler(setNext); BaseHandler implements Handler, ConcreteHandler extends BaseHandler

- Command: Turns a request into a stand-alone object that contains all information
about the request. This transformation lest you pass requests as a method 
argument, delay or queue a request's execution, and support undoable operations
Structure: Invoker who has the command by setCommand
	Command, ConcreteCommand implements Command
	Receiver who is altered by the commands

Iterator: Lets you traverse elements of a collection without exposing its underlying
representation
Structure: Iterator, ConcreteIterator implements Iterator
		IterableCollection, ConcreteCollection

Mediator: Lets you reduce chaotic dependencies between objects, restricts
direct communications between the objects and forces them to collaborate only via a mediator



